#include <iostream>\n#include <windows.h>\n#include <conio.h>\n#include <time.h>\n\nusing namespace std;\n\nconst int boardWidth = 20;\nconst int boardHeight = 20;\n//Movement direction\nenum Direction {STOP = 0, LEFT, RIGHT, UP, DOWN};\n\n//initializing direction\nDirection dir;\n\n//player block\nint x, y, foodX, foodY;\n//score counter\nint score;\n\n//game board\nint board[boardHeight][boardWidth] = { 0 };\n\nvoid setup()\n{\n    //Setting up random seed\n    srand(time(NULL));\n    dir = STOP;\n    //Randomly generate food at x and y\n    foodX = rand() % boardWidth;\n    foodY = rand() % boardHeight;\n    //Position player block in middle of the board\n    x = boardWidth/2;\n    y = boardHeight/2;\n    score = 0;\n}\n\nvoid draw() \n{\n    //I will be using system("cls") to clear the console screen\n    system("cls");\n\n    //Top wall\n    for (int i = 0; i < boardWidth + 2; i++)\n        cout << "#";\n    cout << endl;\n\n    //Game board\n    for (int i = 0; i < boardHeight; i++)\n    {\n        for (int j = 0; j < boardWidth; j++)\n        {\n            if (j == 0)\n                cout << "#";\n            if (i == y && j == x)\n                cout << "O";\n            else if (i == foodY && j == foodX)\n                cout << "$";\n            else\n                cout << " ";\n\n            if (j == boardWidth - 1)\n                cout << "#";\n        }\n        cout << endl;\n    }\n\n    //Bottom wall\n    for (int i = 0; i < boardWidth + 2; i++)\n        cout << "#";\n    cout << endl;\n\n    //Score and Movement instructions\n    cout << "Score: " << score << endl;\n    cout << "Use the arrow keys to move" << endl;\n}\n\nvoid input()\n{\n    //Using getch() to read the keyboard input\n    //194 (left arrow)\n    //195 (right arrow)\n    //192 (down arrow)\n    //193 (up arrow)\n    if (_kbhit())\n    {\n        switch (_getch())\n        {\n        case \'a\':\n            dir = LEFT;\n            break;\n        case \'d\':\n            dir = RIGHT;\n            break;\n        case \'w\':\n            dir = UP;\n            break;\n        case \'s\':\n            dir = DOWN;\n            break;\n        case \'x\':\n            dir = STOP;\n            break;\n        }\n    }\n}\n\nvoid logic()\n{\n    //Following are the standard rules of the game\n    //If player hits the wall, game ends\n    //If player catches the food, new food will spawn at a new location and score will increase\n    switch (dir)\n    {\n    case LEFT:\n        x--;\n        break;\n    case RIGHT:\n        x++;\n        break;\n    case UP:\n        y--;\n        break;\n    case DOWN:\n        y++;\n        break;\n    default:\n        break;\n    }\n\n    //Game over if player reaches the wall\n    if (x <= 0 || x >= boardHeight - 1 || y <= 0 || y >= boardWidth - 1 )\n        dir = STOP;\n\n    //Increase score if player catches the food\n    if (x == foodX && y == foodY)\n    {\n        score += 10;\n        foodX = rand() % boardWidth;\n        foodY = rand() % boardHeight;\n    }\n}\n\nint main()\n{\n    setup();\n    while (dir != STOP)\n    {\n        draw();\n        input();\n        logic();\n    }\n    return 0;\n}
